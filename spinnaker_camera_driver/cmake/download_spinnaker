#!/usr/bin/env python3
#
# Software License Agreement (BSD)
#
# @author    Mike Purvis <mpurvis@clearpathrobotics.com>
# @author    Chris Iverach-Brereton <civerachb@clearpathrobotics.com>
# @copyright (c) 2014, Clearpath Robotics, Inc., All rights reserved.
# @usage     download_spinnaker {arch} {dir} {os-code-name}
#            e.g. download_spinnaker x86_64 /path/to/somewhere xenial
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that
# the following conditions are met:
# * Redistributions of source code must retain the above copyright notice, this list of conditions and the
#   following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other materials provided with the distribution.
# * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or
#   promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import http.cookiejar
import io
import logging
import shutil
import subprocess
import sys
import tarfile
import urllib.request, urllib.parse, urllib.error
import urllib.request, urllib.error, urllib.parse
import os
import glob

logging.basicConfig(level=logging.INFO)

URL_TEMPLATE = 'https://packages.clearpathrobotics.com/stable/flir/Spinnaker/Ubuntu{os_version}/spinnaker-{spinnaker_version}-Ubuntu{os_version}-{arch}-pkg.tar.gz'

ARCHS = {
  'i386': 'i386',
  'x86_64': 'amd64',
  'armv7': 'armhf',
  'armv8': 'armh64'
}

OS_LIBRARY_VERSION = {
  'jessie': '16.04',
  'xenial': '16.04',
  'bionic': '18.04',
  'focal': '20.04'
}

SPINNAKER_INFO = {
  'jessie': {
    'version': '1.27.0.48',
    'shared_library': 'usr/lib/libSpinnaker.so.1.27.0.48'
  },
  'xenial': {
    'version': '1.27.0.48',
    'shared_library': 'usr/lib/libSpinnaker.so.1.27.0.48'
  },
  'bionic': {
    'version': '1.27.0.48',
    'shared_library': 'usr/lib/libSpinnaker.so.1.27.0.48'
  },
  'focal': {
    'version': '2.2.0.48',
    'shared_library': 'opt/spinnaker/lib/libSpinnaker.so.2.2.0.48'
  }
}

arch = sys.argv[1]
destination_folder = sys.argv[2]
os_code_name = sys.argv[3]

os_version = OS_LIBRARY_VERSION[os_code_name]
spinnaker_version = SPINNAKER_INFO[os_code_name]['version']
archive_url = URL_TEMPLATE.format(
    arch=ARCHS[arch],
    os_version=os_version,
    spinnaker_version=spinnaker_version)
folder_name = 'spinnaker-{}-{}'.format(spinnaker_version, ARCHS[arch])
shared_library = SPINNAKER_INFO[os_code_name]['shared_library']

logging.info("CPU architecture is %s", arch)
logging.info("OS code name is %s", os_code_name)
logging.info("Destination folder is %s", destination_folder)

if not os.path.exists(os.path.join(os.getcwd(), "usr/lib/")):
    if not os.path.exists(os.path.join(os.getcwd(), folder_name)):
        cj = http.cookiejar.CookieJar()
        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
        opener.addheaders = [
            ('User-agent', 'Mozilla/5.0'),
            ('Referer', 'https://www.ptgrey.com')]

        logging.info("Downloading SDK archive from {0}...".format(archive_url))
        resp = opener.open(archive_url)

        logging.info("Unpacking tarball.")
        with tarfile.open(mode="r:gz", fileobj=io.BytesIO(resp.read())) as tar:
            tar.extractall()

    logging.info("Unpacking debs.")
    debs = glob.glob(os.path.join(os.getcwd(), folder_name, "*spinnaker*.deb"))
    unpack_dir = os.path.join(os.getcwd())
    if not os.path.exists(unpack_dir):
        os.makedirs(unpack_dir)
    for deb in debs:
        logging.info('Extracting {0}'.format(deb))
        subprocess.call(['dpkg', '--extract', deb, unpack_dir])

    # finally, copy the shared libraries into the output folder
    src_file = os.path.join(unpack_dir, shared_library)
    logging.info('Copying shared library to {0}'.format(destination_folder))
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)
    shutil.copyfile(src_file, os.path.join(destination_folder, 'libSpinnaker.so'))
